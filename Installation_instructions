# Installation instructions
Working on Ubuntu via WSL
Install Ubuntu via WSL (Windows 10/11)
1. Open PowerShell as Administrator
2. Install WSL + Ubuntu in One Command
wsl --install
3. Wait for Ubuntu to Launch - linux username, password
4. Verify Everything Works
lsb_release -a
output:
Distributor ID: Ubuntu
Release:        22.04


5. Install Docker (Locally)
sudo apt update
sudo apt install -y docker.io
sudo systemctl enable docker
sudo systemctl start docker
sudo usermod -aG docker $USER

6. restart unbuntu

7. To Confirm It’s Running in ubuntu:
docker info
output:
Server:
 Containers: ...
 Server Version: ...
 Storage Driver: ...

8. Installed Docker Directly in Ubuntu (without Docker Desktop)
Create Your Project Folder
mkdir my-cloud-app
cd my-cloud-app
mkdir frontend backend

cd frontend
npx create-react-app .
output:
Installing packages. This might take a couple of minutes...
...
Success! Created frontend at ...

inside frontend folder:
Testing the app:
npm start


❌ What went wrong:
trying to run npm start inside the frontend folder, but it failed because there's no package.json. That means the React app was not created yet.

run again:
npx create-react-app .
npm start

React welcome page in your browser at http://localhost:3000.

9. Dockerize the Frontend (React)
create dockerfile:
touch Dockerfile

run:
nano Dockerfile

edit screen:
FROM node:18

WORKDIR /app

COPY . .

RUN npm install

EXPOSE 3000

CMD ["npm", "start"]

#Dockerfile inside your frontend folder — ready to build.

10. Packaging your frontend app into a Docker image.
#inside the frontend/ folder:
cd ~/cloud-app/frontend

#Tells Docker to build an image
docker build -t react-app .

#output:
Step 1/6 : FROM node:18
...
Successfully built abc123...
Successfully tagged react-app:latest

#Testing:
docker run -p 3000:3000 react-app

#open in browser:
http://localhost:3000

#same React screen — but now it’s running inside a Docker container.

11. Push react-app to Docker Hub
#Docker Login from WSL(Ubuntu)
docker login

#Username:
#Password:

#if worked
Login Succeeded!!

12. Tag and Push Your Frontend Image
#Tag the image
docker info # to find docker username
docker tag react-app username/react-app:latest

#Push the image to Docker Hub
docker push username/react-app:latest

output:
The push refers to repository [docker.io/username/react-app]
...
latest: digest: sha256:...
















